// Copyright (C) 2013, 2014 LAAS-CNRS
// Author: Florent Lamiraux
//
// This file is part of the test-hpp.
//
// test-hpp is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// test-hpp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with test-hpp.  If not, see <http://www.gnu.org/licenses/>.

#include <sstream>
#include <ostream>
#include <fstream>
#include <vector>

#include <Eigen/Core>

#include <hpp/util/debug.hh>
#include <hpp/model/device.hh>
#include <hpp/model/body.hh>
#include <hpp/model/collision-object.hh>
#include <hpp/model/joint.hh>
#include <hpp/model/urdf/util.hh>

typedef std::map <std::string, Eigen::Matrix4d, std::less <std::string>,
	    Eigen::aligned_allocator
	    <std::pair<const double, Eigen::Matrix4d> > > PositionsMap_t;
void fillExpectedPositionsMap (PositionsMap_t& positions);

#define BOOST_TEST_MODULE forward_kinematics
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE( test_suite )

BOOST_AUTO_TEST_CASE (body_positions_mesh)
{
  using hpp::model::Device;
  using hpp::model::Joint;
  using hpp::model::Body;
  typedef hpp::model::ObjectVector_t ObjectVector_t;
  typedef hpp::model::JointVector_t JointVector_t;
  typedef std::vector<double> vector_t;
  std::ifstream fileConfig;
  std::ofstream fileHrp2;
  vector_t::size_type configSize;
  fileConfig.open ("@PROJECT_SOURCE_DIR@/data/configuration.data");
  vector_t dofs;
  bool eof = false;
  double value;

  // Read configuration file
  while (!eof) {
    fileConfig >> value;
    if (fileConfig.fail ()) {
      eof = true;
    } else {
      dofs.push_back (value);
    }
  }
  fileConfig.close ();
  // Load hrp2
  hpp::model::HumanoidRobotPtr_t humanoidRobot =
    hpp::model::HumanoidRobot::create ("hrp2_14");
  hpp::model::urdf::loadHumanoidModel(humanoidRobot, "freeflyer",
				      "hrp2_14_description", "hrp2_14",
				      "", "");
  configSize = humanoidRobot->configSize ();
  // Check size of config
  if (dofs.size () != configSize) {
    std::ostringstream error;
    error << "wrong configuration size: " << dofs.size ()
	  << ", expecting " << configSize;
    throw std::runtime_error (error.str ());
  }
  hpp::model::Configuration_t config (configSize);
  for (vector_t::size_type i=0; i<configSize; ++i) {
    config [i] = dofs [i];
  }
  humanoidRobot->currentConfiguration (config);
  humanoidRobot->computeForwardKinematics ();
  hppDout (info, *humanoidRobot);
  // Check positions of geometric objects
  PositionsMap_t positions;
  fillExpectedPositionsMap (positions);
  double maxDiff = 0, diff = 0;
  std::string maxDiffName;
  // Loop over joints to get bodies
  const JointVector_t& jv(humanoidRobot->getJointVector ());
  for (JointVector_t::const_iterator itJoint = jv.begin ();
       itJoint != jv.end (); itJoint++) {
    Body* body = (*itJoint)->linkedBody ();
    if (body != 0) {
      const ObjectVector_t& ov (body->innerObjects (hpp::model::DISTANCE));
      for (ObjectVector_t::const_iterator itObj = ov.begin ();
	   itObj != ov.end (); itObj ++) {
	Eigen::Matrix4d expectedPosition = positions [(*itObj)->name ()];
	const fcl::Transform3f& position ((*itObj)->fcl ()->getTransform ());
	for (std::size_t i=0; i<2; ++i) {
	  for (std::size_t j=0; i<2; ++i) {
	    diff = fabs (position.getRotation () (i, j) -
			 expectedPosition (i, j));
	    BOOST_CHECK (diff < 1e-5);
	    if (diff > maxDiff) {
	      maxDiff = diff;
	      maxDiffName = (*itObj)->name ();
	      hppDout (info, "name: " << maxDiffName << std::endl
		       << "i=" << i << "\t j=" << j);
	    }
	  }
	  diff = fabs (position.getTranslation ()[i] - expectedPosition (i, 3));
	  BOOST_CHECK (diff < 1e-5);
	  if (diff > maxDiff) {
	    maxDiff = diff;
	    maxDiffName = (*itObj)->name ();
	    hppDout (info, "name: " << maxDiffName << std::endl << "i=" << i
		     << "\t j=3");
	  }
	}
      }
    }
  }
  hppDout (info, "Body: " << maxDiffName << ", max difference: " << maxDiff);
}

BOOST_AUTO_TEST_SUITE_END()

void fillExpectedPositionsMap (PositionsMap_t& positions)
{
  Eigen::Matrix4d position;
  position << -0.885052, -0.465491, 4.52066e-10, 0.783276, 0.465491, -0.885052, 4.74263e-10, -0.628749, 1.79336e-10, 6.30181e-10, 1, 0.658642, 0, 0, 0, 1;
  positions ["BODY"] = position;
  position << -0.855729, -0.517424, 4.52066e-10, 0.754954, 0.517424, -0.855729, 4.74263e-10, -0.613853, 1.41451e-10, 6.39751e-10, 1, 1.00634, 0, 0, 0, 1;
  positions ["CHEST_LINK0"] = position;
  position << -0.853005, -0.517424, 0.0682238, 0.754954, 0.515777, -0.855729, -0.041252, -0.613853, 0.0797258, 6.39751e-10, 0.996817, 1.00634, 0, 0, 0, 1;
  positions ["torso"] = position;
  position << -0.926742, -0.369451, 0.0682238, 0.781208, 0.367377, -0.929157, -0.041252, -0.629728, 0.0786312, -0.0131662, 0.996817, 1.30214, 0, 0, 0, 1;
  positions ["HEAD_LINK0"] = position;
  position << -0.926452, -0.369451, 0.072064, 0.781208, 0.367203, -0.929157, -0.0427742, -0.629728, 0.0827617, -0.0131662, 0.996482, 1.30214, 0, 0, 0, 1;
  positions ["HEAD_LINK1"] = position;
  position << -0.841123, -0.517424, -0.157433, 0.631123, 0.508592, -0.855729, 0.0951931, -0.831126, -0.183975, 6.39751e-10, 0.982931, 1.1874, 0, 0, 0, 1;
  positions ["LARM_LINK0"] = position;
  position << -0.841123, -0.540542, -0.0180832, 0.631123, 0.508592, -0.801895, 0.313527, -0.831126, -0.183975, 0.254518, 0.949407, 1.1874, 0, 0, 0, 1;
  positions ["LARM_LINK1"] = position;
  position << -0.812884, -0.582145, -0.0180832, 0.631123, 0.548263, -0.775312, 0.313527, -0.831126, -0.196538, 0.244947, 0.949407, 1.1874, 0, 0, 0, 1;
  positions ["LARM_LINK2"] = position;
  position << -0.764318, -0.582145, 0.277355, 0.635644, 0.624569, -0.775312, 0.0938345, -0.909508, 0.160411, 0.244947, 0.956174, 0.950052, 0, 0, 0, 1;
  positions ["LARM_LINK3"] = position;
  position << -0.776657, -0.565577, 0.277355, 0.566305, 0.607755, -0.788561, 0.0938345, -0.932966, 0.16564, 0.241441, 0.956174, 0.711008, 0, 0, 0, 1;
  positions ["LARM_LINK4"] = position;
  position << -0.805465, -0.565577, 0.177054, 0.566305, 0.59104, -0.788561, 0.169833, -0.932966, 0.0435641, 0.241441, 0.969437, 0.711008, 0, 0, 0, 1;
  positions ["l_wrist"] = position;
  position << 0.805465, 0.590905, -0.0453603, 0.560796, -0.59104, 0.795304, -0.134775, -0.933329, -0.0435641, 0.135366, 0.989837, 0.614083, 0, 0, 0, 1;
  positions ["LARM_LINK6"] = position;
  position << 0.805465, 0.565577, 0.177054, 0.56362, -0.59104, 0.788561, 0.169833, -0.924939, -0.0435641, -0.241441, 0.969437, 0.552461, 0, 0, 0, 1;
  positions ["LHAND_LINK0"] = position;
  position << 0.805465, 0.590905, -0.0453603, 0.552092, -0.59104, 0.795304, -0.134775, -0.939934, -0.0435641, 0.135366, 0.989837, 0.542752, 0, 0, 0, 1;
  positions ["LHAND_LINK1"] = position;
  position << 0.805465, 0.459559, 0.374208, 0.538173, -0.59104, 0.669314, 0.450212, -0.964872, -0.0435641, -0.583802, 0.810727, 0.62374, 0, 0, 0, 1;
  positions ["LHAND_LINK2"] = position;
  position << 0.805465, 0.565577, 0.177054, 0.514888, -0.59104, 0.788561, 0.169833, -0.992886, -0.0435641, -0.241441, 0.969437, 0.573292, 0, 0, 0, 1;
  positions ["LHAND_LINK3"] = position;
  position << 0.805465, 0.459559, 0.374208, 0.521459, -0.59104, 0.669314, 0.450212, -0.982647, -0.0435641, -0.583802, 0.810727, 0.555857, 0, 0, 0, 1;
  positions ["LHAND_LINK4"] = position;
  position << -0.763048, -0.517424, 0.387338, 0.889835, 0.461383, -0.855729, -0.234207, -0.403261, 0.45264, 6.39751e-10, 0.891693, 1.1874, 0, 0, 0, 1;
  positions ["RARM_LINK0"] = position;
  position << -0.763048, -0.645532, 0.0323343, 0.889835, 0.461383, -0.579045, -0.672185, -0.403261, 0.45264, -0.497991, 0.739677, 1.1874, 0, 0, 0, 1;
  positions ["RARM_LINK1"] = position;
  position << -0.622616, -0.78186, 0.0323343, 0.889835, 0.565382, -0.478027, -0.672185, -0.403261, 0.541011, -0.400232, 0.739677, 1.1874, 0, 0, 0, 1;
  positions ["RARM_LINK2"] = position;
  position << -0.171563, -0.78186, 0.599385, 0.881751, -0.452207, -0.478027, -0.752993, -0.235215, 0.875257, -0.400232, -0.271551, 1.00248, 0, 0, 0, 1;
  positions ["RARM_LINK3"] = position;
  position << -0.378416, -0.705365, 0.599385, 0.731905, -0.565494, -0.336479, -0.752993, -0.0469667, 0.732815, -0.623893, -0.271551, 1.07037, 0, 0, 0, 1;
  positions ["RARM_LINK4"] = position;
  position << -0.361628, -0.705365, 0.60966, 0.731905, -0.586183, -0.336479, -0.737002, -0.0469667, 0.724993, -0.623893, -0.291793, 1.07037, 0, 0, 0, 1;
  positions ["r_wrist"] = position;
  position << -0.361628, -0.10054, 0.926886, 0.65988, -0.586183, -0.748567, -0.309899, 0.0163189, 0.724993, -0.655393, 0.211768, 1.08561, 0, 0, 0, 1;
  positions ["RARM_LINK6"] = position;
  position << -0.361628, -0.705365, 0.60966, 0.602178, -0.586183, -0.336479, -0.737002, 0.0356113, 0.724993, -0.623893, -0.291793, 1.07243, 0, 0, 0, 1;
  positions ["RHAND_LINK0"] = position;
  position << -0.361628, -0.10054, 0.926886, 0.604928, -0.586183, -0.748567, -0.309899, 0.051313, 0.724993, -0.655393, 0.211768, 1.0865, 0, 0, 0, 1;
  positions ["RHAND_LINK1"] = position;
  position << -0.361628, -0.931676, -0.0347225, 0.688095, -0.586183, 0.256171, -0.768613, 0.0297781, 0.724993, -0.257598, -0.638771, 1.11057, 0, 0, 0, 1;
  positions ["RHAND_LINK2"] = position;
  position << -0.361628, -0.705365, 0.60966, 0.690255, -0.586183, -0.336479, -0.737002, 0.0776053, 0.724993, -0.623893, -0.291793, 1.15032, 0, 0, 0, 1;
  positions ["RHAND_LINK3"] = position;
  position << -0.361628, -0.931676, -0.0347225, 0.670434, -0.586183, 0.256171, -0.768613, 0.0825397, 0.724993, -0.257598, -0.638771, 1.14442, 0, 0, 0, 1;
  positions ["RHAND_LINK4"] = position;
  position << -0.899269, -0.437396, 4.52066e-10, 0.755346, 0.437396, -0.899269, 4.74263e-10, -0.681852, 1.99088e-10, 6.24222e-10, 1, 0.655642, 0, 0, 0, 1;
  positions ["LLEG_LINK0"] = position;
  position << -0.899269, -0.437359, -0.00562022, 0.755346, 0.437396, -0.899195, -0.011555, -0.681852, 1.99088e-10, -0.0128493, 0.999917, 0.655642, 0, 0, 0, 1;
  positions ["LLEG_LINK1"] = position;
  position << -0.814879, -0.437359, 0.380379, 0.755346, 0.390225, -0.899195, -0.197922, -0.681852, 0.428598, -0.0128493, 0.903404, 0.655642, 0, 0, 0, 1;
  positions ["LLEG_LINK2"] = position;
  position << -0.834845, -0.437359, -0.334292, 0.641233, 0.411289, -0.899195, 0.149298, -0.622475, -0.36589, -0.0128493, 0.930569, 0.384621, 0, 0, 0, 1;
  positions ["LLEG_LINK3"] = position;
  position << -0.899269, -0.437359, -0.00562022, 0.726213, 0.437396, -0.899195, -0.011555, -0.698737, 5.55422e-09, -0.0128493, 0.999917, 0.105, 0, 0, 0, 1;
  positions ["LLEG_LINK4"] = position;
  position << -0.899269, -0.437396, 6.87548e-09, 0.726213, 0.437396, -0.899269, 1.43734e-09, -0.698737, 5.55422e-09, 4.29986e-09, 1, 0.105, 0, 0, 0, 1;
  positions ["l_ankle"] = position;
  position << -0.899269, -0.437396, 4.52066e-10, 0.811206, 0.437396, -0.899269, 4.74263e-10, -0.575646, 1.99088e-10, 6.24222e-10, 1, 0.655642, 0, 0, 0, 1;
  positions ["RLEG_LINK0"] = position;
  position << -0.899269, -0.437359, -0.00566284, 0.811206, 0.437396, -0.899194, -0.0116426, -0.575646, 1.99088e-10, -0.0129467, 0.999916, 0.655642, 0, 0, 0, 1;
  positions ["RLEG_LINK1"] = position;
  position << -0.813988, -0.437359, 0.382284, 0.811206, 0.389714, -0.899194, -0.198932, -0.575646, 0.430752, -0.0129467, 0.902378, 0.655642, 0, 0, 0, 1;
  positions ["RLEG_LINK2"] = position;
  position << -0.838519, -0.437359, -0.324966, 0.69652, 0.412965, -0.899194, 0.144604, -0.515966, -0.355451, -0.0129467, 0.934605, 0.384928, 0, 0, 0, 1;
  positions ["RLEG_LINK3"] = position;
  position << -0.899269, -0.437359, -0.00566284, 0.809318, 0.437396, -0.899194, -0.0116426, -0.527876, -1.28638e-09, -0.0129467, 0.999916, 0.105, 0, 0, 0, 1;
  positions ["RLEG_LINK4"] = position;
  position << -0.899269, -0.437396, -1.11439e-09, 0.809318, 0.437396, -0.899269, 6.49853e-10, -0.527876, -1.28638e-09, 9.69619e-11, 1, 0.105, 0, 0, 0, 1;
  positions ["r_ankle"] = position;
}
